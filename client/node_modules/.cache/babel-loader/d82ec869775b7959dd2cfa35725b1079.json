{"ast":null,"code":"var _jsxFileName = \"/home/teo/Documentos/Projectos/card-game/src/components/Board.jsx\";\nimport React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport Slot from \"./Slot\";\nimport styled from \"styled-components\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport BoardSection from \"./BoardSection\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Midoriya, Leena, deck01 } from \"../utils/cards/Cards\";\nimport background from \"../assets/wood-bg.jpg\";\nimport Deck from \"./Deck\";\nconst BoardWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: whitesmoke;\n  background-image: url(${background});\n  background-size: cover;\n  display: flex;\n`;\n\nfunction Board() {\n  const [positions, setpositions] = useState([new Midoriya(), new Leena(), new Midoriya(), new Midoriya(), new Midoriya(), null, new Midoriya(), new Midoriya()]);\n\n  const drawCard = () => {\n    const randNum = Math.random() * deck01.length;\n    const drawedCard = deck01[randNum];\n    removeCard(randNum, deck01);\n    console.log(deck01);\n  };\n\n  const removeCard = (idx, arr) => {\n    arr.splice(idx, 1);\n    return arr;\n  };\n\n  const attack = (idx, newPos) => {\n    if (idx === newPos) return; // else if()\n\n    const positionsCopy = [...positions];\n    positionsCopy[idx].attack(positionsCopy[newPos]);\n    const newPositions = positionsCopy.map(elm => elm == null || elm.life <= 0 ? null : elm);\n    setpositions(newPositions);\n  };\n\n  const move = (idx, newPos) => {\n    if (idx === newPos) return;\n    const positionsCopy = [...positions];\n    positionsCopy.splice(newPos, 1, positionsCopy[idx]);\n    positionsCopy.splice(idx, 1, null);\n    setpositions(positionsCopy);\n  };\n\n  return React.createElement(DndProvider, {\n    backend: Backend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(BoardWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Row, {\n    style: {\n      width: \"100%\"\n    },\n    noGutters: false,\n    className: \"justify-content-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, positions.map((elm, idx) => React.createElement(Col, {\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(BoardSection, {\n    move: move,\n    attack: attack,\n    char: elm,\n    idx: idx,\n    key: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, elm != null ? React.createElement(Card, {\n    char: elm,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }) : React.createElement(Slot, {\n    empty: true,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))))), React.createElement(Deck, {\n    drawCard: drawCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/teo/Documentos/Projectos/card-game/src/components/Board.jsx"],"names":["React","useState","Card","Slot","styled","DndProvider","Backend","BoardSection","Container","Row","Col","Midoriya","Leena","deck01","background","Deck","BoardWrapper","div","Board","positions","setpositions","drawCard","randNum","Math","random","length","drawedCard","removeCard","console","log","idx","arr","splice","attack","newPos","positionsCopy","newPositions","map","elm","life","move","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport Slot from \"./Slot\";\nimport styled from \"styled-components\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport BoardSection from \"./BoardSection\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Midoriya, Leena, deck01 } from \"../utils/cards/Cards\";\nimport background from \"../assets/wood-bg.jpg\";\nimport Deck from \"./Deck\";\nconst BoardWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: whitesmoke;\n  background-image: url(${background});\n  background-size: cover;\n  display: flex;\n`;\n\nfunction Board() {\n  const [positions, setpositions] = useState([\n    new Midoriya(),\n    new Leena(),\n    new Midoriya(),\n    new Midoriya(),\n    new Midoriya(),\n    null,\n    new Midoriya(),\n    new Midoriya()\n  ]);\n\n  const drawCard = () => {\n    const randNum = Math.random() * deck01.length;\n    const drawedCard = deck01[randNum];\n    removeCard(randNum, deck01);\n    console.log(deck01);\n  };\n\n  const removeCard = (idx, arr) => {\n    arr.splice(idx, 1);\n    return arr;\n  };\n\n  const attack = (idx, newPos) => {\n    if (idx === newPos) return;\n    // else if()\n    const positionsCopy = [...positions];\n    positionsCopy[idx].attack(positionsCopy[newPos]);\n    const newPositions = positionsCopy.map(elm => (elm == null || elm.life <= 0 ? null : elm));\n    setpositions(newPositions);\n  };\n\n  const move = (idx, newPos) => {\n    if (idx === newPos) return;\n    const positionsCopy = [...positions];\n    positionsCopy.splice(newPos, 1, positionsCopy[idx]);\n    positionsCopy.splice(idx, 1, null);\n\n    setpositions(positionsCopy);\n  };\n\n  return (\n    <DndProvider backend={Backend}>\n      <BoardWrapper>\n        <Row style={{ width: \"100%\" }} noGutters={false} className=\"justify-content-around\">\n          {positions.map((elm, idx) => (\n            <Col md={3}>\n              <BoardSection move={move} attack={attack} char={elm} idx={idx} key={idx}>\n                {elm != null ? <Card char={elm} idx={idx}></Card> : <Slot empty idx={idx}></Slot>}\n              </BoardSection>\n            </Col>\n          ))}\n        </Row>\n        <Deck drawCard={drawCard} />\n      </BoardWrapper>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}