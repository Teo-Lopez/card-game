{"ast":null,"code":"var _jsxFileName = \"/home/teo/Documentos/Projectos/card-game/client/src/components/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Slot from \"./Slot\";\nimport styled from \"styled-components\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport BoardSection from \"./BoardSection\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { deck01 } from \"../utils/cards/Cards\";\nimport background from \"../assets/wood-bg.jpg\";\nimport Deck from \"./Deck\";\nconst BoardWrapper = styled.div`\n  width: 100%;\n\n  background-color: whitesmoke;\n  background-image: url(${background});\n  background-size: cover;\n`;\n\nfunction Board() {\n  const [enemyPositions, setEnemyPositions] = useState(Array(4).fill(null));\n  const [ownPositions, setOwnPositions] = useState(Array(4).fill(null));\n  const [drawedCard, setDrawedCard] = useState(null);\n\n  const drawCard = () => {\n    const randNum = Math.floor(Math.random() * deck01.length);\n    const drawedCard = deck01[randNum];\n    removeCard(randNum, deck01);\n    setDrawedCard(drawedCard);\n  };\n\n  useEffect(() => {\n    const playCard = (drawedCard, idx = ownPositions.indexOf(null)) => {\n      if (idx === -1 || drawedCard == null) return;\n      const ownPositionsCopy = [...ownPositions];\n      ownPositionsCopy.splice(idx, 1, drawedCard);\n      setDrawedCard(null);\n      setOwnPositions(ownPositionsCopy);\n    };\n\n    playCard(drawedCard);\n  }, [drawedCard, ownPositions]);\n\n  const removeCard = (idx, arr) => {\n    arr.splice(idx, 1);\n    return arr;\n  };\n\n  const attack = (idx, newPos) => {\n    if (idx === newPos) return; // else if()\n\n    const enemyPositionsCopy = [...enemyPositions];\n    enemyPositionsCopy[idx].attack(enemyPositionsCopy[newPos]);\n    const newEnemyPositions = enemyPositionsCopy.map(elm => elm == null || elm.life <= 0 ? null : elm);\n    setEnemyPositions(newEnemyPositions);\n  };\n\n  const move = (idx, newPos) => {\n    if (idx === newPos) return;\n    const ownPositionsCopy = [...ownPositions];\n    ownPositionsCopy.splice(newPos, 1, ownPositionsCopy[idx]);\n    ownPositionsCopy.splice(idx, 1, null);\n    setOwnPositions(ownPositionsCopy);\n  };\n\n  return React.createElement(DndProvider, {\n    backend: Backend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(BoardWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Row, {\n    style: {\n      width: \"100%\",\n      paddingTop: \"10px\"\n    },\n    noGutters: false,\n    className: \"justify-content-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, enemyPositions.map((elm, idx) => React.createElement(Col, {\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(BoardSection, {\n    move: move,\n    attack: attack,\n    char: elm,\n    idx: idx,\n    key: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, elm != null ? React.createElement(Card, {\n    char: elm,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : React.createElement(Slot, {\n    empty: true,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))))), React.createElement(Row, {\n    style: {\n      width: \"100%\",\n      paddingTop: \"10px\"\n    },\n    noGutters: false,\n    className: \"justify-content-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, ownPositions.map((elm, idx) => React.createElement(Col, {\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(BoardSection, {\n    move: move,\n    attack: attack,\n    char: elm,\n    idx: idx,\n    key: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, elm != null ? React.createElement(Card, {\n    own: true,\n    char: elm,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }) : React.createElement(Slot, {\n    own: true,\n    empty: true,\n    idx: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))))), React.createElement(Deck, {\n    drawCard: drawCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/teo/Documentos/Projectos/card-game/client/src/components/Board.jsx"],"names":["React","useState","useEffect","Card","Slot","styled","DndProvider","Backend","BoardSection","Row","Col","deck01","background","Deck","BoardWrapper","div","Board","enemyPositions","setEnemyPositions","Array","fill","ownPositions","setOwnPositions","drawedCard","setDrawedCard","drawCard","randNum","Math","floor","random","length","removeCard","playCard","idx","indexOf","ownPositionsCopy","splice","arr","attack","newPos","enemyPositionsCopy","newEnemyPositions","map","elm","life","move","width","paddingTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Slot from \"./Slot\";\nimport styled from \"styled-components\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport BoardSection from \"./BoardSection\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { deck01 } from \"../utils/cards/Cards\";\nimport background from \"../assets/wood-bg.jpg\";\nimport Deck from \"./Deck\";\n\nconst BoardWrapper = styled.div`\n  width: 100%;\n\n  background-color: whitesmoke;\n  background-image: url(${background});\n  background-size: cover;\n`;\n\nfunction Board() {\n  const [enemyPositions, setEnemyPositions] = useState(Array(4).fill(null));\n  const [ownPositions, setOwnPositions] = useState(Array(4).fill(null));\n  const [drawedCard, setDrawedCard] = useState(null);\n\n  const drawCard = () => {\n    const randNum = Math.floor(Math.random() * deck01.length);\n    const drawedCard = deck01[randNum];\n    removeCard(randNum, deck01);\n    setDrawedCard(drawedCard);\n  };\n\n  useEffect(() => {\n    const playCard = (drawedCard, idx = ownPositions.indexOf(null)) => {\n      if (idx === -1 || drawedCard == null) return;\n      const ownPositionsCopy = [...ownPositions];\n      ownPositionsCopy.splice(idx, 1, drawedCard);\n      setDrawedCard(null);\n      setOwnPositions(ownPositionsCopy);\n    };\n    playCard(drawedCard);\n  }, [drawedCard, ownPositions]);\n\n  const removeCard = (idx, arr) => {\n    arr.splice(idx, 1);\n    return arr;\n  };\n\n  const attack = (idx, newPos) => {\n    if (idx === newPos) return;\n    // else if()\n    const enemyPositionsCopy = [...enemyPositions];\n    enemyPositionsCopy[idx].attack(enemyPositionsCopy[newPos]);\n    const newEnemyPositions = enemyPositionsCopy.map(elm => (elm == null || elm.life <= 0 ? null : elm));\n    setEnemyPositions(newEnemyPositions);\n  };\n\n  const move = (idx, newPos) => {\n    if (idx === newPos) return;\n    const ownPositionsCopy = [...ownPositions];\n    ownPositionsCopy.splice(newPos, 1, ownPositionsCopy[idx]);\n    ownPositionsCopy.splice(idx, 1, null);\n\n    setOwnPositions(ownPositionsCopy);\n  };\n\n  return (\n    <DndProvider backend={Backend}>\n      <BoardWrapper>\n        <Row style={{ width: \"100%\", paddingTop: \"10px\" }} noGutters={false} className=\"justify-content-around\">\n          {enemyPositions.map((elm, idx) => (\n            <Col md={3}>\n              <BoardSection move={move} attack={attack} char={elm} idx={idx} key={idx}>\n                {elm != null ? <Card char={elm} idx={idx}></Card> : <Slot empty idx={idx}></Slot>}\n              </BoardSection>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ width: \"100%\", paddingTop: \"10px\" }} noGutters={false} className=\"justify-content-around\">\n          {ownPositions.map((elm, idx) => (\n            <Col md={3}>\n              <BoardSection move={move} attack={attack} char={elm} idx={idx} key={idx}>\n                {elm != null ? <Card own char={elm} idx={idx}></Card> : <Slot own empty idx={idx}></Slot>}\n              </BoardSection>\n            </Col>\n          ))}\n        </Row>\n        <Deck drawCard={drawCard} />\n      </BoardWrapper>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}