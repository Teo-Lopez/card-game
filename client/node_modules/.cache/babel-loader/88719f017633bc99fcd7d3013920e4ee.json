{"ast":null,"code":"import _toConsumableArray from\"/home/teo/Documentos/Projectos/card-game/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/teo/Documentos/Projectos/card-game/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/teo/Documentos/Projectos/card-game/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100vh;\\n  background-color: whitesmoke;\\n  background-image: url(\",\");\\n  background-size: cover;\\n  display: flex;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect}from\"react\";import Card from\"./Card\";import Slot from\"./Slot\";import styled from\"styled-components\";import{DndProvider}from\"react-dnd\";import Backend from\"react-dnd-html5-backend\";import BoardSection from\"./BoardSection\";import{Row,Col}from\"react-bootstrap\";import{deck01}from\"../utils/cards/Cards\";import background from\"../assets/wood-bg.jpg\";import Deck from\"./Deck\";var BoardWrapper=styled.div(_templateObject(),background);function Board(){var _useState=useState(Array(8).fill(null)),_useState2=_slicedToArray(_useState,2),ownPositions=_useState2[0],setOwnPositions=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),drawedCard=_useState4[0],setDrawedCard=_useState4[1];var drawCard=function drawCard(){var randNum=Math.floor(Math.random()*deck01.length);var drawedCard=deck01[randNum];removeCard(randNum,deck01);setDrawedCard(drawedCard);};useEffect(function(){var playCard=function playCard(drawedCard){var idx=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ownPositions.indexOf(null);if(idx===-1||drawedCard==null)return;var ownPositionsCopy=_toConsumableArray(ownPositions);ownPositionsCopy.splice(idx,1,drawedCard);setDrawedCard(null);setOwnPositions(ownPositionsCopy);};playCard(drawedCard);},[drawedCard,ownPositions]);var removeCard=function removeCard(idx,arr){arr.splice(idx,1);return arr;};var attack=function attack(idx,newPos){if(idx===newPos)return;// else if()\nvar ownPositionsCopy=_toConsumableArray(ownPositions);ownPositionsCopy[idx].attack(ownPositionsCopy[newPos]);var newownPositions=ownPositionsCopy.map(function(elm){return elm==null||elm.life<=0?null:elm;});setOwnPositions(newownPositions);};var move=function move(idx,newPos){if(idx===newPos)return;var ownPositionsCopy=_toConsumableArray(ownPositions);ownPositionsCopy.splice(newPos,1,ownPositionsCopy[idx]);ownPositionsCopy.splice(idx,1,null);setOwnPositions(ownPositionsCopy);};return React.createElement(DndProvider,{backend:Backend},React.createElement(BoardWrapper,null,React.createElement(Row,{style:{width:\"100%\"},noGutters:false,className:\"justify-content-around\"},ownPositions.map(function(elm,idx){return React.createElement(Col,{md:3},React.createElement(BoardSection,{move:move,attack:attack,char:elm,idx:idx,key:idx},elm!=null?React.createElement(Card,{char:elm,idx:idx}):React.createElement(Slot,{empty:true,idx:idx})));})),React.createElement(Deck,{drawCard:drawCard})));}export default Board;","map":{"version":3,"sources":["/home/teo/Documentos/Projectos/card-game/client/src/components/Board.jsx"],"names":["React","useState","useEffect","Card","Slot","styled","DndProvider","Backend","BoardSection","Row","Col","deck01","background","Deck","BoardWrapper","div","Board","Array","fill","ownPositions","setOwnPositions","drawedCard","setDrawedCard","drawCard","randNum","Math","floor","random","length","removeCard","playCard","idx","indexOf","ownPositionsCopy","splice","arr","attack","newPos","newownPositions","map","elm","life","move","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Slot from \"./Slot\";\nimport styled from \"styled-components\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport BoardSection from \"./BoardSection\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { deck01 } from \"../utils/cards/Cards\";\nimport background from \"../assets/wood-bg.jpg\";\nimport Deck from \"./Deck\";\n\nconst BoardWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: whitesmoke;\n  background-image: url(${background});\n  background-size: cover;\n  display: flex;\n`;\n\nfunction Board() {\n  const [ownPositions, setOwnPositions] = useState(Array(8).fill(null));\n  const [drawedCard, setDrawedCard] = useState(null);\n\n  const drawCard = () => {\n    const randNum = Math.floor(Math.random() * deck01.length);\n    const drawedCard = deck01[randNum];\n    removeCard(randNum, deck01);\n    setDrawedCard(drawedCard);\n  };\n\n  useEffect(() => {\n    const playCard = (drawedCard, idx = ownPositions.indexOf(null)) => {\n      if (idx === -1 || drawedCard == null) return;\n      const ownPositionsCopy = [...ownPositions];\n      ownPositionsCopy.splice(idx, 1, drawedCard);\n      setDrawedCard(null);\n      setOwnPositions(ownPositionsCopy);\n    };\n    playCard(drawedCard);\n  }, [drawedCard, ownPositions]);\n\n  const removeCard = (idx, arr) => {\n    arr.splice(idx, 1);\n    return arr;\n  };\n\n  const attack = (idx, newPos) => {\n    if (idx === newPos) return;\n    // else if()\n    const ownPositionsCopy = [...ownPositions];\n    ownPositionsCopy[idx].attack(ownPositionsCopy[newPos]);\n    const newownPositions = ownPositionsCopy.map(elm => (elm == null || elm.life <= 0 ? null : elm));\n    setOwnPositions(newownPositions);\n  };\n\n  const move = (idx, newPos) => {\n    if (idx === newPos) return;\n    const ownPositionsCopy = [...ownPositions];\n    ownPositionsCopy.splice(newPos, 1, ownPositionsCopy[idx]);\n    ownPositionsCopy.splice(idx, 1, null);\n\n    setOwnPositions(ownPositionsCopy);\n  };\n\n  return (\n    <DndProvider backend={Backend}>\n      <BoardWrapper>\n        <Row style={{ width: \"100%\" }} noGutters={false} className=\"justify-content-around\">\n          {ownPositions.map((elm, idx) => (\n            <Col md={3}>\n              <BoardSection move={move} attack={attack} char={elm} idx={idx} key={idx}>\n                {elm != null ? <Card char={elm} idx={idx}></Card> : <Slot empty idx={idx}></Slot>}\n              </BoardSection>\n            </Col>\n          ))}\n        </Row>\n        <Deck drawCard={drawCard} />\n      </BoardWrapper>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}